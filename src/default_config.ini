# BSD 3-Clause License
#
# Copyright (c) 2016, 2017, The University of Sydney. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The user can change the settings here (which are the defaults), or
# override them in bin/config.ini, or by providing appropriate command line
# flags.
# Fuller descriptions of what these settings do are provided in src/settings.py

# Don't modify this section header.
[DEFAULT]

# The maximum number of times to perform the graph analysis step.
# A negative value means no maximum.
max_iterations = 3

# Begin breaking out of the analysis loop if the time spent exceeds this value.
# A negative value means no maximum.
bailout_seconds = 5

# Upon completion of the analysis, if there are blocks unreachable from the
# contract root, remove them.
remove_unreachable = False

# Upon completion of the analysis, if there are blocks unreachable from the
# contract root, merge them.
merge_unreachable = True

# Raise an exception if an empty stack is popped.
die_on_empty_pop = False

# Do not apply changes to exit stacks after a symbolic overflow occurrs
# in their blocks.
skip_stack_on_overflow = True

# Reinitialise all blocks' exit stacks to be empty.
reinit_stacks = True

# After completing the analysis, propagate entry stack values into blocks.
hook_up_stack_vars = True

# Connect any new edges that can be inferred after performing the analysis.
hook_up_jumps = True

# JUMPIs with known conditions become JUMPs (or are deleted).
mutate_jumps = False

# JUMP and JUMPI instructions with invalid destinations become THROW and
# THROWIs.
generate_throws = False

# Mutate jumps in the final analysis phase.
final_mutate_jumps = False

# generate throws in the final analysis phase.
final_generate_throws = True

# Hook up stack vars and/or hook up jumps after each block rather than after
# the whole analysis is complete.
mutate_blockwise = True

# If stacks start growing without bound, reduce the maximum stack size in order
# to hasten convergence.
clamp_large_stacks = True

# Stack sizes will not be clamped smaller than this value.
clamp_stack_minimum = 10

# If any computed variable's number of possible values exceeds a given
# threshold, widen its value to Top.
widen_variables = True

# Widen if the size of a given variable exceeds this value,
# and widen_variables is True.
widen_threshold = 10

# If True, apply arithmetic operations to variables with multiple values;
# otherwise, only apply them to variables whose value is definite.
set_valued_ops = True

# If true, dataflow analysis will return a dict of information about
# the contract, otherwise return an empty dict.
analytics = False

# Attempt to extract solidity functions.
extract_functions = True

# Tag block names with the function(s) they belong to.
mark_functions = False

# If true, then unrecognised opcodes and invalid disassembly
# will not be skipped, but will result in an error.
strict = False

# If true, then variables with constant values will be replaced with
# their values in the IL output.
output_replace_var_values = False
